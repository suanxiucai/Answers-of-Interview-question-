/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *   a  TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
 
//题目描述
//
//输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
//例如输入前序遍历序列{ 1,2,4,7,3,5,6,8 }和中序遍历序列{ 4,7,2,1,5,3,8,6 }，则重建二叉树并返回。
class Solution {
public:
    struct TreeNode* reConstructBinaryTree(vector<int> pre,vector<int> in) {
   		if (pre.empty() || in.empty())     //检查输入
			return NULL;
		
		int length = pre.size();
		vector<int> pre_left, pre_right, in_left, in_right;
		
		int value = pre[0];                //找到根节点
		TreeNode *root = new TreeNode(value);
		
		int p = 0;                         //在中序中找到跟节点
		for (p; p < length; p++) {
			if (in[p] == value)
				break;
		}

		if (p == length - 1 && in[p] != value)
			return NULL;                    //如果找到最后都没找到，证明前序和中序不匹配
		else {
			for (int i = 0; i < length; i++) {
				if (i < p) {                 //构建左子树
					pre_left.push_back(pre[i + 1]);
					in_left.push_back(in[i]);
				}
				else if (i>p) {                //构建右子树
					pre_right.push_back(pre[i]);
					in_right.push_back(in[i]);
				}
			}
			root->left = reConstructBinaryTree(pre_left, in_left);
			root->right = reConstructBinaryTree(pre_right, in_right);
			return root;
		}
    
    }
};
